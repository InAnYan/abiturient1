# Generated by Django 5.0.4 on 2024-05-23 06:30

import datetime
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ContactInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=255, verbose_name='Last name')),
                ('first_name', models.CharField(max_length=255, verbose_name='First name')),
                ('patronymic', models.CharField(blank=True, max_length=255, null=True, verbose_name='Patronymic')),
                ('phone_number', models.CharField(help_text='Write the phone number in the following form: +380123456789 (start with +, then area code, then the rest of the number)', max_length=13, validators=[django.core.validators.RegexValidator('^\\+\\d{10,13}$', 'Wrong phone number format')], verbose_name='Phone number')),
            ],
            options={
                'verbose_name': 'Contact information',
                'verbose_name_plural': 'Contact informations',
            },
        ),
        migrations.CreateModel(
            name='SensitiveInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passport_serie', models.CharField(blank=True, help_text='If you have an ID card, leave this field empty. If you have a book-passport, then fill this field.', max_length=2, null=True, verbose_name='Passport serie')),
                ('passport_number', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(999999999)], verbose_name='Passport number')),
                ('passport_authority', models.TextField(blank=True, help_text='If you have an ID card, this field should contain numbers. If you have a book-passport, this field should contain a text (description).', null=True, verbose_name='Authority')),
                ('passport_issue_date', models.DateField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(limit_value=datetime.date.today)], verbose_name='Date of issue')),
                ('rntrc', models.IntegerField(blank=True, help_text="Registration number of the taxpayer's account card (a local equivalent of the taxpayer's identification number)", null=True, validators=[django.core.validators.MaxValueValidator(999999999999)], verbose_name='RNTRC')),
            ],
            options={
                'verbose_name': 'Sensitive information',
                'verbose_name_plural': 'Sensitive informations',
            },
        ),
        migrations.CreateModel(
            name='AbiturientRepresentative',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('living_address', models.TextField(verbose_name='Living address')),
                ('contact_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='abiturients.contactinformation', verbose_name='Contact information')),
                ('sensitive_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='abiturients.sensitiveinformation', verbose_name='Sensitive information')),
            ],
        ),
        migrations.CreateModel(
            name='Abiturient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birth_date', models.DateField(verbose_name='Date of birth')),
                ('birth_country', models.CharField(max_length=255, verbose_name='Birth country')),
                ('birth_town', models.CharField(max_length=255, verbose_name='Birth town')),
                ('nationality', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nationality')),
                ('education_institution', models.CharField(max_length=255, verbose_name='Educational institution')),
                ('education_place', models.CharField(max_length=255, verbose_name='Education place')),
                ('education_end', models.DateField(verbose_name='Education end date')),
                ('work', models.TextField(blank=True, null=True, verbose_name='Work')),
                ('marital_status', models.IntegerField(choices=[(1, 'Single'), (2, 'Married')], verbose_name='Marital status')),
                ('foreign_language', models.CharField(blank=True, max_length=255, null=True, verbose_name='Foreign language')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('living_address', models.TextField(verbose_name='Living address')),
                ('registered_address', models.TextField(verbose_name='Registered address')),
                ('representative', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='abiturients.abiturientrepresentative', verbose_name='Representative')),
                ('contact_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='abiturient', to='abiturients.contactinformation', verbose_name='Contact information')),
                ('father_contact_information', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='father', to='abiturients.contactinformation', verbose_name="Father's contact information")),
                ('mother_contact_information', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mother', to='abiturients.contactinformation', verbose_name="Mother's contact information")),
                ('sensitive_information', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='abiturients.sensitiveinformation', verbose_name='Sensitive information')),
            ],
            options={
                'verbose_name': 'Abiturient',
                'verbose_name_plural': 'Abiturients',
            },
        ),
    ]
